{"version":3,"sources":["logo.svg","Footer.js","Finder.js","Registration.js","Home.js","Header.js","serviceWorker.js","index.js"],"names":["module","exports","Footer","props","className","Finder","Registration","Home","class","Header","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,wMCa5BC,G,MAVA,SAACC,GACf,OACC,yBAAKC,UAAU,UACd,iECUYC,EAZA,SAACF,GACf,OACC,6BACC,yBAAKC,UAAU,aACd,gFAED,kBAAC,EAAD,QCMYE,EAZM,SAACH,GACrB,OACC,6BACC,yBAAKC,UAAU,aACd,kEAED,kBAAC,EAAD,QCSYG,G,MAdF,SAACJ,GACb,OACC,6BACA,yBAAKK,MAAM,iCACR,yBAAKA,MAAM,aACT,wBAAIA,MAAM,aAAV,mBACA,uBAAGA,MAAM,QAAT,2FAGL,kBAAC,EAAD,SCiCaC,EAvCA,SAACN,GACf,OACC,kBAAC,IAAD,KACA,yBAAKC,UAAU,+CACZ,uBAAGA,UAAU,eAAeM,KAAK,KAAjC,eACC,4BAAQN,UAAU,iBAAiBO,KAAK,SAASC,cAAY,WAAWC,cAAY,aAAaC,gBAAc,YAAYC,gBAAc,QAAQC,aAAW,qBAC1J,0BAAMZ,UAAU,yBAEnB,yBAAKA,UAAU,2BAA2Ba,GAAG,aAC3C,wBAAIb,UAAU,cACX,wBAAIA,UAAU,mBACZ,kBAAC,IAAD,CAAMc,GAAG,KAAI,uBAAGd,UAAU,WAAWM,KAAK,KAA7B,OAAqC,0BAAMF,MAAM,WAAZ,gBAEpD,wBAAIJ,UAAU,YACZ,kBAAC,IAAD,CAAMc,GAAG,WAAU,uBAAGd,UAAU,WAAWM,KAAK,KAA7B,kBAErB,wBAAIN,UAAU,YACZ,kBAAC,IAAD,CAAMc,GAAG,iBAAgB,uBAAGd,UAAU,WAAWM,KAAK,KAA7B,uBAMnC,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOS,KAAK,WACX,kBAAC,EAAD,OAED,kBAAC,IAAD,CAAOA,KAAK,iBACX,kBAAC,EAAD,OAED,kBAAC,IAAD,CAAOA,KAAM,KACZ,kBAAC,EAAD,U,MC3BgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ff8db2cc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './Footer.css';\r\n\r\nconst Footer = (props) => {\r\n\treturn (\r\n\t\t<div className=\"footer\">\r\n\t\t\t<p>Footer Information will go here</p>\r\n\r\n\t\t</div>\r\n\r\n\t)\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport Footer from './Footer';\r\n\r\n\r\nconst Finder = (props) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div className=\"jumbotron\">\r\n\t\t\t\t<h1>Page for finding and adding stocks to your list</h1>\r\n\t\t\t</div>\r\n\t\t\t<Footer />\r\n\t\t</div>\r\n\r\n\t)\r\n}\r\n\r\nexport default Finder;","import React from 'react';\r\nimport Footer from './Footer';\r\n\r\n\r\nconst Registration = (props) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div className=\"jumbotron\">\r\n\t\t\t\t<h1>Login/Registration form goes here</h1>\r\n\t\t\t</div>\r\n\t\t\t<Footer />\r\n\t\t</div>\r\n\r\n\t)\r\n}\r\n\r\nexport default Registration;","import React from 'react';\r\nimport './Home.css'\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\nimport Footer from './Footer';\r\n\r\nconst Home = (props) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t<div class=\"jumbotron jumbotron-fluid all\">\r\n  \t\t\t<div class=\"container\">\r\n    \t\t\t<h1 class=\"display-4\">Fluid jumbotron</h1>\r\n    \t\t\t<p class=\"lead\">This is a modified jumbotron that occupies the entire horizontal space of its parent.</p>\r\n  \t\t\t</div>\r\n\t\t</div>\r\n\t\t<Footer />\r\n\t\t</div>\r\n\r\n\t)\r\n}\r\nexport default Home;","import React from 'react';\r\nimport './Header.css'\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport {BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\r\nimport Finder from './Finder';\r\nimport Registration from './Registration';\r\nimport Home from './Home';\r\n\r\nconst Header = (props) => {\r\n\treturn (\r\n\t\t<Router>\r\n\t\t<nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n  \t\t\t<a className=\"navbar-brand\" href=\"#\">StockTracer</a>\r\n  \t\t\t\t<button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n    \t\t\t\t<span className=\"navbar-toggler-icon\"></span>\r\n  \t\t\t\t</button>\r\n  \t\t\t<div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n    \t\t\t<ul className=\"navbar-nav\">\r\n      \t\t\t\t<li className=\"nav-item active\">\r\n        \t\t\t\t<Link to=\"/\"><a className=\"nav-link\" href=\"#\">Home<span class=\"sr-only\">(current)</span></a></Link>\r\n      \t\t\t\t</li>\r\n      \t\t\t\t<li className=\"nav-item\">\r\n        \t\t\t\t<Link to=\"/finder\"><a className=\"nav-link\" href=\"#\">Stock Finder</a></Link>\r\n      \t\t\t\t</li>\r\n      \t\t\t\t<li className=\"nav-item\">\r\n       \t\t\t\t\t<Link to=\"/registration\"><a className=\"nav-link\" href=\"#\">Login/Register</a></Link>\r\n      \t\t\t\t</li>\r\n    \t\t\t</ul>\r\n  \t\t\t</div>\r\n\t\t</nav>\r\n\r\n\t\t<Switch>\r\n\t\t\t<Route path='/finder'>\r\n\t\t\t\t<Finder />\r\n\t\t\t</Route>\r\n\t\t\t<Route path='/registration'>\r\n\t\t\t\t<Registration />\r\n\t\t\t</Route>\r\n\t\t\t<Route path =\"/\">\r\n\t\t\t\t<Home />\r\n\t\t\t</Route>\r\n\t\t\t</Switch>\r\n\t\t</Router>\r\n\r\n\t);\r\n}\r\n\r\nexport default Header;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\nimport Header from './Header';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Header />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}